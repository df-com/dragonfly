// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: candlestick.proto

#include "candlestick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace arc {
namespace pb {
PROTOBUF_CONSTEXPR Candlestick::Candlestick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datetime_)*/int64_t{0}
  , /*decltype(_impl_.open_)*/0
  , /*decltype(_impl_.high_)*/0
  , /*decltype(_impl_.low_)*/0
  , /*decltype(_impl_.close_)*/0
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandlestickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandlestickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandlestickDefaultTypeInternal() {}
  union {
    Candlestick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandlestickDefaultTypeInternal _Candlestick_default_instance_;
}  // namespace pb
}  // namespace arc
static ::_pb::Metadata file_level_metadata_candlestick_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_candlestick_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_candlestick_2eproto = nullptr;

const uint32_t TableStruct_candlestick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _impl_.datetime_),
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::arc::pb::Candlestick, _impl_.volume_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::arc::pb::Candlestick)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::arc::pb::_Candlestick_default_instance_._instance,
};

const char descriptor_table_protodef_candlestick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021candlestick.proto\022\006arc.pb\"g\n\013Candlesti"
  "ck\022\020\n\010datetime\030\001 \001(\003\022\014\n\004open\030\002 \001(\002\022\014\n\004hi"
  "gh\030\003 \001(\002\022\013\n\003low\030\004 \001(\002\022\r\n\005close\030\005 \001(\002\022\016\n\006"
  "volume\030\006 \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_candlestick_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_candlestick_2eproto = {
    false, false, 140, descriptor_table_protodef_candlestick_2eproto,
    "candlestick.proto",
    &descriptor_table_candlestick_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_candlestick_2eproto::offsets,
    file_level_metadata_candlestick_2eproto, file_level_enum_descriptors_candlestick_2eproto,
    file_level_service_descriptors_candlestick_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_candlestick_2eproto_getter() {
  return &descriptor_table_candlestick_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_candlestick_2eproto(&descriptor_table_candlestick_2eproto);
namespace arc {
namespace pb {

// ===================================================================

class Candlestick::_Internal {
 public:
};

Candlestick::Candlestick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arc.pb.Candlestick)
}
Candlestick::Candlestick(const Candlestick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Candlestick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datetime_){}
    , decltype(_impl_.open_){}
    , decltype(_impl_.high_){}
    , decltype(_impl_.low_){}
    , decltype(_impl_.close_){}
    , decltype(_impl_.volume_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.datetime_, &from._impl_.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.volume_) -
    reinterpret_cast<char*>(&_impl_.datetime_)) + sizeof(_impl_.volume_));
  // @@protoc_insertion_point(copy_constructor:arc.pb.Candlestick)
}

inline void Candlestick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datetime_){int64_t{0}}
    , decltype(_impl_.open_){0}
    , decltype(_impl_.high_){0}
    , decltype(_impl_.low_){0}
    , decltype(_impl_.close_){0}
    , decltype(_impl_.volume_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Candlestick::~Candlestick() {
  // @@protoc_insertion_point(destructor:arc.pb.Candlestick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Candlestick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Candlestick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Candlestick::Clear() {
// @@protoc_insertion_point(message_clear_start:arc.pb.Candlestick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.datetime_)) + sizeof(_impl_.volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candlestick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 datetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Candlestick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arc.pb.Candlestick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 datetime = 1;
  if (this->_internal_datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_datetime(), target);
  }

  // float open = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open = this->_internal_open();
  uint32_t raw_open;
  memcpy(&raw_open, &tmp_open, sizeof(tmp_open));
  if (raw_open != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_open(), target);
  }

  // float high = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = this->_internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_high(), target);
  }

  // float low = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_low = this->_internal_low();
  uint32_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_low(), target);
  }

  // float close = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close = this->_internal_close();
  uint32_t raw_close;
  memcpy(&raw_close, &tmp_close, sizeof(tmp_close));
  if (raw_close != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_close(), target);
  }

  // double volume = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = this->_internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arc.pb.Candlestick)
  return target;
}

size_t Candlestick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arc.pb.Candlestick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 datetime = 1;
  if (this->_internal_datetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_datetime());
  }

  // float open = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open = this->_internal_open();
  uint32_t raw_open;
  memcpy(&raw_open, &tmp_open, sizeof(tmp_open));
  if (raw_open != 0) {
    total_size += 1 + 4;
  }

  // float high = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = this->_internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    total_size += 1 + 4;
  }

  // float low = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_low = this->_internal_low();
  uint32_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    total_size += 1 + 4;
  }

  // float close = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close = this->_internal_close();
  uint32_t raw_close;
  memcpy(&raw_close, &tmp_close, sizeof(tmp_close));
  if (raw_close != 0) {
    total_size += 1 + 4;
  }

  // double volume = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = this->_internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Candlestick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Candlestick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Candlestick::GetClassData() const { return &_class_data_; }


void Candlestick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Candlestick*>(&to_msg);
  auto& from = static_cast<const Candlestick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arc.pb.Candlestick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_datetime() != 0) {
    _this->_internal_set_datetime(from._internal_datetime());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open = from._internal_open();
  uint32_t raw_open;
  memcpy(&raw_open, &tmp_open, sizeof(tmp_open));
  if (raw_open != 0) {
    _this->_internal_set_open(from._internal_open());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high = from._internal_high();
  uint32_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    _this->_internal_set_high(from._internal_high());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_low = from._internal_low();
  uint32_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    _this->_internal_set_low(from._internal_low());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close = from._internal_close();
  uint32_t raw_close;
  memcpy(&raw_close, &tmp_close, sizeof(tmp_close));
  if (raw_close != 0) {
    _this->_internal_set_close(from._internal_close());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = from._internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Candlestick::CopyFrom(const Candlestick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arc.pb.Candlestick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candlestick::IsInitialized() const {
  return true;
}

void Candlestick::InternalSwap(Candlestick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candlestick, _impl_.volume_)
      + sizeof(Candlestick::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(Candlestick, _impl_.datetime_)>(
          reinterpret_cast<char*>(&_impl_.datetime_),
          reinterpret_cast<char*>(&other->_impl_.datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candlestick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_candlestick_2eproto_getter, &descriptor_table_candlestick_2eproto_once,
      file_level_metadata_candlestick_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace arc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arc::pb::Candlestick*
Arena::CreateMaybeMessage< ::arc::pb::Candlestick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arc::pb::Candlestick >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
